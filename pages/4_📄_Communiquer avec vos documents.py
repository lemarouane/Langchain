import os
import utils
import streamlit as st
from streaming import StreamHandler

from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import PyPDFLoader
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.chains import ConversationalRetrievalChain
from langchain.vectorstores import DocArrayInMemorySearch
from langchain.text_splitter import RecursiveCharacterTextSplitter

st.set_page_config(page_title="ChatPDF", page_icon="üìÑ")
st.header('Discutez avec vos documents')
st.write("La fonctionnalit√© 'Discutez avec vos documents' vous permet d'interagir avec un chatbot capable d'acc√©der √† des documents personnalis√©s. Cette fonction peut √™tre incroyablement utile pour votre sant√© mentale et votre bien-√™tre. Voici comment :")

st.write("1. **R√©flexion et Expression Personnelles :** Utilisez cette fonction pour √©crire et exprimer vos pens√©es, √©motions et exp√©riences. Noter vos pens√©es peut vous aider √† clarifier vos sentiments et √† mieux comprendre votre bien-√™tre √©motionnel.")

st.write("2. **Journal Num√©rique :** Pensez-y comme un journal num√©rique. Enregistrez vos pens√©es quotidiennes, vos pr√©occupations et vos r√©alisations, ce qui facilite le suivi de votre parcours en mati√®re de sant√© mentale.")

st.write("3. **Traitement des Traumatismes :** Pour certaines personnes, √©crire sur des exp√©riences traumatiques peut √™tre un moyen de les traiter. En enregistrant et en discutant de ces exp√©riences, les individus peuvent commencer √† gu√©rir et √† faire face √† ces √©v√©nements.")

st.write("4. **Planification et D√©finition d'Objectifs :** Utilisez le chatbot pour d√©finir des objectifs, cr√©er des plans d'action et suivre votre progression. Cela peut √™tre b√©n√©fique pour le d√©veloppement personnel et la gestion du stress.")

st.write("5. **R√©f√©rence Future :** Sauvegardez les conversations avec le chatbot pour une r√©f√©rence future. Vous pouvez les revisiter et relire les discussions pass√©es pour vous rappeler de pr√©cieux conseils, astuces ou moments de r√©flexion.")

st.write("6. **Prise de Conscience de Soi :** En examinant vos propres √©crits, vous pouvez prendre conscience de sch√©mas de pens√©e ou de comportements qui affectent votre sant√© mentale. Cette prise de conscience de soi peut vous aider √† effectuer des changements positifs.")

st.write("7. **Suivi de la Progression :** Si vous souffrez de troubles de sant√© mentale, cette fonction peut vous aider √† suivre les sympt√¥mes, les humeurs et votre progression au fil du temps. Elle est particuli√®rement utile pour les personnes atteintes de d√©pression, d'anxi√©t√© ou de troubles bipolaires.")

st.write("N'oubliez pas que, bien que cette fonction puisse √™tre utile, elle ne remplace pas les soins de sant√© mentale professionnels. Elle peut cependant compl√©ter les soins professionnels en offrant un espace d'auto-assistance et de r√©flexion. Il est essentiel de maintenir la confidentialit√© et la s√©curit√© des donn√©es lors de l'utilisation de cette fonction, car elle enregistre des informations personnelles et des pens√©es intimes.")

class CustomDataChatbot:

    def __init__(self):
        utils.configure_openai_api_key()
        self.openai_model = "gpt-3.5-turbo"

    def save_file(self, file):
        folder = 'tmp'
        if not os.path.exists(folder):
            os.makedirs(folder)
        
        file_path = f'./{folder}/{file.name}'
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())
        return file_path

    @st.spinner('Analyzing documents..')
    def setup_qa_chain(self, uploaded_files):
        # Load documents
        docs = []
        for file in uploaded_files:
            file_path = self.save_file(file)
            loader = PyPDFLoader(file_path)
            docs.extend(loader.load())
        
        # Split documents
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1500,
            chunk_overlap=200
        )
        splits = text_splitter.split_documents(docs)

        # Create embeddings and store in vectordb
        embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
        vectordb = DocArrayInMemorySearch.from_documents(splits, embeddings)

        # Define retriever
        retriever = vectordb.as_retriever(
            search_type='mmr',
            search_kwargs={'k':2, 'fetch_k':4}
        )

        # Setup memory for contextual conversation        
        memory = ConversationBufferMemory(
            memory_key='chat_history',
            return_messages=True
        )

        # Setup LLM and QA chain
        llm = ChatOpenAI(model_name=self.openai_model, temperature=0, streaming=True)
        qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever=retriever, memory=memory, verbose=True)
        return qa_chain

    @utils.enable_chat_history
    def main(self):

        # User Inputs
        uploaded_files = st.sidebar.file_uploader(label='Upload PDF files', type=['pdf'], accept_multiple_files=True)
        if not uploaded_files:
            st.error("Please upload PDF documents to continue!")
            st.stop()

        user_query = st.chat_input(placeholder="Ask me anything!")

        if uploaded_files and user_query:
            qa_chain = self.setup_qa_chain(uploaded_files)

            utils.display_msg(user_query, 'user')

            with st.chat_message("assistant"):
                st_cb = StreamHandler(st.empty())
                response = qa_chain.run(user_query, callbacks=[st_cb])
                st.session_state.messages.append({"role": "assistant", "content": response})

if __name__ == "__main__":
    obj = CustomDataChatbot()
    obj.main()